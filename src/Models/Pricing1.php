<?php

declare(strict_types=1);

/*
 * SampleAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SampleAPILib\Models;

use SampleAPILib\ApiHelper;
use SampleAPILib\Utils\DateTimeHelper;
use stdClass;

class Pricing1 implements \JsonSerializable
{
    /**
     * @var float|null
     */
    private $discount;

    /**
     * @var \DateTime|null
     */
    private $validUntil;

    /**
     * Returns Discount.
     */
    public function getDiscount(): ?float
    {
        return $this->discount;
    }

    /**
     * Sets Discount.
     *
     * @maps discount
     */
    public function setDiscount(?float $discount): void
    {
        $this->discount = $discount;
    }

    /**
     * Returns Valid Until.
     */
    public function getValidUntil(): ?\DateTime
    {
        return $this->validUntil;
    }

    /**
     * Sets Valid Until.
     *
     * @maps validUntil
     * @factory \SampleAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setValidUntil(?\DateTime $validUntil): void
    {
        $this->validUntil = $validUntil;
    }

    /**
     * Converts the Pricing1 object to a human-readable string representation.
     *
     * @return string The string representation of the Pricing1 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify('Pricing1', ['discount' => $this->discount, 'validUntil' => $this->validUntil]);
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->discount)) {
            $json['discount']   = $this->discount;
        }
        if (isset($this->validUntil)) {
            $json['validUntil'] = DateTimeHelper::toRfc3339DateTime($this->validUntil);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
