<?php

declare(strict_types=1);

/*
 * SampleAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace SampleAPILib\Models;

use SampleAPILib\ApiHelper;
use SampleAPILib\Utils\DateTimeHelper;
use stdClass;

class Pricing6 implements \JsonSerializable
{
    /**
     * @var float|null
     */
    private $installment;

    /**
     * @var \DateTime|null
     */
    private $paymentDue;

    /**
     * Returns Installment.
     */
    public function getInstallment(): ?float
    {
        return $this->installment;
    }

    /**
     * Sets Installment.
     *
     * @maps installment
     */
    public function setInstallment(?float $installment): void
    {
        $this->installment = $installment;
    }

    /**
     * Returns Payment Due.
     */
    public function getPaymentDue(): ?\DateTime
    {
        return $this->paymentDue;
    }

    /**
     * Sets Payment Due.
     *
     * @maps paymentDue
     * @factory \SampleAPILib\Utils\DateTimeHelper::fromRfc3339DateTime
     */
    public function setPaymentDue(?\DateTime $paymentDue): void
    {
        $this->paymentDue = $paymentDue;
    }

    /**
     * Converts the Pricing6 object to a human-readable string representation.
     *
     * @return string The string representation of the Pricing6 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Pricing6',
            ['installment' => $this->installment, 'paymentDue' => $this->paymentDue]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->installment)) {
            $json['installment'] = $this->installment;
        }
        if (isset($this->paymentDue)) {
            $json['paymentDue']  = DateTimeHelper::toRfc3339DateTime($this->paymentDue);
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
